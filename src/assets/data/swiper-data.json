[
  {
    "title": "Ultrage",
    "description": "Ultrage est un outil polyvalent pour la création web pour l'amélioration de la productivité et de la créativité des professionnels et amateurs du web.",
    "details": "<p><strong>Ultrage</strong> est né du besoin d’unifier plusieurs outils utilisés dans la création web en une seule plateforme intuitive.L’idée était de simplifier les workflows tout en stimulant la créativité des utilisateurs, qu’ils soient développeurs confirmés ou débutants passionnés.</p><p>Les outils intégrés à Ultrage :</p><ul><li><strong>U-Couleur</strong> : un générateur et gestionnaire de palettes pour créer et sauvegarder des couleurs cohérentes.</li><li><strong>U-Tâche</strong> : un gestionnaire de tâches minimaliste et rapide, pour organiser son travail efficacement.</li><li><strong>U-Mot de passe</strong> : un générateur de mots de passe robustes, avec options de personnalisation.</li><li><strong>U-Documentation</strong> : un éditeur simplifié pour rédiger et structurer sa documentation technique.</li></ul><p>Grâce à <strong>Symfony</strong>, j’ai pu structurer proprement les fonctionnalités de chaque module, tandis que <strong>Bootstrap</strong> m’a permis de garantir une interface responsive et agréable à utiliser.</p><a href=\"https://ultrage.meezyr.fr\" target=\"_blank\" class=\"btn btn-primary\" title=\"Consulter Ultrage\"><span>Consulter Ultrage<app-svg icon=\"arrow_right\"></app-svg></span></a>",
    "image": "/images/realizations/home_ultrage_realization.jpg"
  },
  {
    "title": "GAMA",
    "description": "GAMA est un outil web de gestion centralisée du VDI, facilitant le déploiement, le suivi et la maintenance des postes de travail virtualisés.",
    "details": "<p>Dans le cadre de mon travail à l'<strong>Université de Reims Champagne-Ardenne</strong>, j'ai conçu et développé un site web nommé <strong>GAMA</strong> (Gestion des Applications et des MAchines virtuelles).</p><p><strong>GAMA</strong> est un outil web de <em>gestion centralisée du VDI</em> (Virtual Desktop Infrastructure). Il facilite le <strong>déploiement</strong>, le <strong>suivi</strong> et la <strong>maintenance</strong> des postes de travail virtualisés. Il a été conçu pour offrir une interface intuitive aux administrateurs système et aux techniciens de l’université, mais aussi aux personnels et aux étudiants.</p><p><strong>Technologies utilisées</strong></p><ul><li><strong>Frontend :</strong> Angular (TypeScript)</li><li><strong>Backend :</strong> Node.js avec Express.js</li><li><strong>Design UI/UX :</strong> Figma</li><li><strong>API :</strong> API Horizon, API AppVolumes, API VSphere</li><li><strong>AD :</strong> GAMA communique avec l'Active Directory pour obtenir des informations</li></ul><p><strong>Cahier des charges</strong></p><p>La conception a débuté par la rédaction d’un cahier des charges détaillant les besoins fonctionnels et techniques du projet. Voici un aperçu de ce document :</p><img src=\"/images/realizations/cdc_gama_realization.jpg\" alt=\"Cahier des charges GAMA\" class=\"img-fluid mb-3\" /><p><strong>Conception UI sur Figma</strong></p><p>L’interface utilisateur a été pensée et maquettée sur Figma, en collaboration avec les équipes techniques et utilisateurs finaux dans le cadre d'un groupe de travail.</p><img src=\"/images/realizations/designsystem_gama_realization.jpg\" alt=\"DesignSystem de la maquette sur Figma\" class=\"img-fluid mb-3\" /><img src=\"/images/realizations/connection_gama_realization.jpg\" alt=\"Maquette de la page de connexion sur Figma\" class=\"img-fluid mb-3\" /><p><strong>Architecture du projet</strong></p><p>Le projet suit une architecture en couches avec séparation des responsabilités :</p><ul><li><strong>Client Angular :</strong> gère l'affichage, la navigation, et la logique d'interface</li><li><strong>API Express :</strong> traite les requêtes, les règles métier et l'accès aux données</li><li><strong>Base de données :</strong> stocke les informations sur les postes, les utilisateurs et les configurations VDI</li></ul><p><strong>Fonctionnalités clés</strong></p><ul><li>Visualisation en temps réel des postes déployés, via des statistiques</li><li>Gestion des configurations et des postes de travail, masters et pools</li><li>Ajout d'applications aux postes de travail</li><li>Historique des interventions et actions sur les machines</li><li>Authentification sécurisée</li></ul><img src=\"/images/realizations/form_gama_realization.jpg\" alt=\"Page de formulaire sur GAMA\" class=\"img-fluid mt-3\" />",
    "image": "/images/realizations/home_gama_realization.jpg"
  },
  {
    "title": "Polarion",
    "description": "Polarion est un site web dédié à une association, permettant la gestion des projets, membres et activités via une interface simple et collaborative.",
    "details": "<p><strong>Conception du site web Polarion</strong></p><p>Polarion est un site web développé pour une <strong>association à but non lucratif</strong> œuvrant dans le domaine du <strong>jeu vidéo</strong>. Son objectif est de centraliser la gestion des <strong>projets</strong>, des <strong>membres</strong> et des <strong>activités</strong> de l'association à travers une interface <strong>simple, intuitive et collaborative</strong>.</p><p><strong>Architecture du projet</strong></p><p>Le développement de Polarion repose sur une architecture moderne et bien segmentée :</p><ul><li><strong>Frontend</strong> : Développé en <strong>React.js</strong></li><li><strong>Backend API</strong> : Construit avec <strong>Node.js</strong> et <strong>Express.js</strong></li><li><strong>Site vitrine</strong> : Partie publique présentant l'association, ses projets et ses membres</li><li><strong>Back-office</strong> : Interface d'administration pour gérer les contenus du site et les utilisateurs</li><li><strong>Intégration Twitch</strong> : Affichage des <strong>streams en direct</strong> des membres diffusant sur les serveurs de l'association</li></ul><img src=\"/images/realizations/connection_polarion_realization.jpg\" alt=\"Page de connexion de Polarion\" class=\"img-fluid mb-3\" /><p><strong>Fonctionnalités principales</strong></p><ul><li>Gestion des projets en cours, archivés et à venir</li><li>Liste et profils des membres de l'association, ainsi qu'un système de recrutement de membres</li><li>Système d’authentification et de rôles pour les administrateurs</li><li>Affichage automatique des lives Twitch actifs</li><li>Back-office complet pour administrer le site vitrine</li></ul><p><strong>Maquettes et conception graphique</strong></p><p>L’interface de Polarion a été conçue en amont sur <strong>Figma</strong>, avec une attention particulière portée à l’expérience utilisateur et à l’ergonomie de navigation.</p><img src=\"/images/realizations/figma_polarion_realization.jpg\" alt=\"Maquette figma du site Polarion\" class=\"img-fluid mb-3\" /><p><strong>Conclusion</strong></p><p>Polarion est un projet complet développé avec une stack JavaScript moderne, conçu pour répondre aux besoins spécifiques d’une association de passionnés. Grâce à son interface claire et ses fonctionnalités pratiques, il facilite la gestion quotidienne tout en valorisant les activités de l'association auprès du public.</p>",
    "image": "/images/realizations/home_polarion_realization.jpg"
  },
  {
    "title": "ZeBot.",
    "description": "Zebot est un site web qui permet de piloter, configurer et gérer facilement un bot Discord pour automatiser et modérer un serveur.",
    "details": "<p><strong>Présentation de ZeBot</strong></p><p><strong>ZeBot</strong> est une interface web développée en PHP, conçue pour piloter, configurer et gérer facilement un bot Discord. Cet outil permet aux administrateurs de serveurs Discord de bénéficier d’un tableau de bord intuitif pour automatiser des tâches, gérer la modération et personnaliser le comportement de leur bot selon leurs besoins.</p><img src=\"/images/realizations/commands_zebot_realization.jpg\" alt=\"Aperçu des commandes de ZeBot.\" class=\"img-fluid mb-3\"><p><strong>Conception de l'outil</strong></p><p>Le site a été conçu en PHP côté serveur. Voici les principales étapes de développement :</p><ul><li><strong>API Bot :</strong> Communication entre le site et le bot Discord via une API REST en PHP, permettant d'envoyer des commandes et de récupérer l’état du bot.</li><li><strong>Base de données :</strong> Utilisation de MySQL pour stocker les configurations, les préférences des utilisateurs et les logs d'activité du bot.</li><li><strong>Interface utilisateur :</strong> Conception d’un tableau de bord responsive en HTML/CSS avec des composants dynamiques en JavaScript (et un peu d’AJAX pour les interactions sans rechargement).</li><li><strong>Sécurité :</strong> Vérification des permissions Discord et mise en place de protections CSRF et XSS pour sécuriser les échanges.</li></ul><p><strong>Fonctionnalités principales</strong></p><ul><li>Gestion des commandes personnalisées</li><li>Configuration de la modération automatique</li><li>Affichage des logs d’activité</li><li>Gestion des rôles et permissions</li><li>Intégration en temps réel avec Discord via Webhooks</li></ul><p>Le but de ZeBot est de rendre la gestion d’un serveur Discord plus fluide, tout en offrant une grande souplesse de personnalisation grâce à une interface simple, mais puissante.</p>",
    "image": "/images/realizations/home_zebot_realization.jpg"
  }
]